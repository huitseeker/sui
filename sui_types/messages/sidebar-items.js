initSidebarItems({"enum":[["CallArg",""],["CallResult",""],["ConsensusTransaction",""],["ExecutionStatus",""],["InputObjectKind",""],["ObjectInfoRequestKind",""],["SingleTransactionKind",""],["TransactionKind",""]],"struct":[["AccountInfoRequest",""],["AccountInfoResponse",""],["BatchInfoRequest","An information Request for batches, and their associated transactions"],["BatchInfoResponseItem",""],["ConfirmationTransaction",""],["ConsensusOutput",""],["ConsensusSync",""],["MoveCall",""],["MoveModulePublish",""],["ObjectInfoRequest","A request for information about an object and optionally its parent certificate at a specific version."],["ObjectInfoResponse","This message provides information about the latest object and its lock as well as the parent certificate of the object at a specific version."],["ObjectResponse",""],["SignatureAggregator",""],["TransactionData",""],["TransactionEffects","The response from processing a transaction or a certified transaction"],["TransactionEffectsEnvelope",""],["TransactionEnvelope","A transaction signed by a client, optionally signed by an authority (depending on `S`). `S` indicates the authority signing state. It can be either empty or signed. We make the authority signature templated so that `TransactionEnvelope<S>` can be used universally in the transactions storage in `SuiDataStore`, shared by both authorities and non-authorities: authorities store signed transactions, while non-authorities store unsigned transactions."],["TransactionInfoRequest",""],["TransactionInfoResponse",""],["TransferCoin",""]],"type":[["CertifiedTransaction",""],["SignedTransaction","A transaction that is signed by a sender and also by an authority."],["SignedTransactionEffects",""],["Transaction","A transaction that is signed by a sender but not yet by an authority."],["UnsignedTransactionEffects",""]]});